Rute.java
import javafx.application.Platform;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.layout.GridPane;

import javafx.stage.FileChooser;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;

import java.io.File;
import java.util.Scanner;

import javafx.scene.control.Button;
import javafx.scene.text.Text;
import javafx.scene.text.Font;

/*class Rute extends Button{
  char merke = ' ';
  Rute(String str){
    super(" ");
    this.merke = str.charAt(0);
    setFont(new Font(50));
    setPrefSize(120,120);
    this.settMerke(this.merke);
  }
  void settMerke(char c){
    setText(""+c);
    this.merke = c;
  }
}*/
abstract class Rute extends Button{
  int coor_rad = -1;
  int coor_kol = -1;
  public Labyrint ref_labyrint = null;
  public Rute ref_nord = null;
  public Rute ref_syd = null;
  public Rute ref_vest = null;
  public Rute ref_ost = null;
  public Rute r;
  public String vei = "";

  public Rute(int rad, int kol){
    this.coor_rad = rad;
    this.coor_kol = kol;
  }

  public void setLab(Labyrint lab){
    this.ref_labyrint = lab;
  }

  public void settNord(Rute nabo){
    this.ref_nord = nabo;
  }

  public void settSyd(Rute nabo){
    this.ref_syd = nabo;
  }

  public void settOst(Rute nabo){
    this.ref_ost = nabo;
  }

  public void settVest(Rute nabo){
    this.ref_vest = nabo;
  }

  abstract public char tilTegn(); //Returnerer . eller #

  public Rute hentNabo(char c){
    if (c == 'n'){
      this.r = this.ref_nord;
    } else if (c == 's'){
      this.r = this.ref_syd;
    } else if (c == 'o'){
      this.r = this.ref_ost;
    } else if (c == 'v'){
      this.r = this.ref_vest;
    }
    return this.r;
  }

  public void gaa(Rute forrige){
    this.vei = forrige.vei + ("(" + this.coor_kol + "," + this.coor_rad + ")");
    if (this.tilTegn()=='#'){
      return;
    } else if (this.erAapning() == true){
      this.ref_labyrint.utveier.leggTil(this.vei);
      return;
    } else {
      this.vei = this.vei + ("-->");
      if (this.ref_ost!=forrige){
        this.ref_ost.gaa(this);
      } if (this.ref_syd!=forrige){
        this.ref_syd.gaa(this);
      } if (this.ref_vest!=forrige){
        this.ref_vest.gaa(this);
      } if (this.ref_nord!=forrige){
        this.ref_nord.gaa(this);
      }
    }
  }

  abstract public boolean erAapning();

  public void finnUtvei(){
    this.gaa(this);
  }
}

HvitRute.java
class HvitRute extends Rute{
  public HvitRute(int rad, int kol){
    super(rad, kol);
  }

  public char tilTegn(){
    return '.';
    //setFont(new Font(50));
    //setPrefSize(120,120);
  }

  @Override
  public boolean erAapning(){
    return false;
  }
}

Aapning.java
class Aapning extends HvitRute{
  public Aapning(int rad, int kol){
    super(rad, kol);
  }

  public char tilTegn(){
    return '.';
    //setFont(new Font(50));
    //setPrefSize(120,120);
  }

  @Override
  public boolean erAapning(){
    return true;
  }
}

SortRute.java
class SortRute extends Rute{

  public SortRute(int rad, int kol){
    super(rad, kol);
  }

  public char tilTegn(){
    return '#';
    //setFont(new Font(50));
    //setPrefSize(120,120);
  }

  @Override
  public boolean erAapning(){
    return false;
  }
}

Liste.java
interface Liste<T> extends Iterable<T>{
  public int stoerrelse();
  public void leggTil(int pos, T x);
  public void leggTil(T x);
  public void sett(int pos, T x);
  public T hent(int pos);
  public T fjern(int pos);
  public T fjern();
}

Lenkeliste.java
import java.util.Iterator;

class Lenkeliste<T> implements Liste<T>{
  public class Node{
    Node neste = null;
    T data;

    Node(T x){ /*Nodens konstruktoer*/
      this.data = x;
    }
  }
  public Node start = new Node(null);

  public class LenkelisteIterator implements Iterator<T>{
    private Liste<T> minListe;
    private int indeks = 0;

    public LenkelisteIterator(Liste<T> lx){
      minListe = lx;
    }

    @Override
    public boolean hasNext(){
      return indeks<minListe.stoerrelse();
    }

    @Override
    public T next(){
      return minListe.hent(indeks++);
    }

    @Override
    public void remove(){ /*Implementerer ikke denne.*/
      throw new UnsupportedOperationException();
    }
  }

  public LenkelisteIterator iterator(){
    return new LenkelisteIterator(this);
  }

  @Override /*Foerst inn, foerst ut = queue.*/
  public void leggTil(T x){
    if (start.neste == null){ /*Sjekker om lista er tom.*/
      start.neste = new Node(x);
    }
    else{
      Node p = start;
      while (p.neste != null){ /*Finner siste sted i lista.*/
        p = p.neste;
      }
      p.neste = new Node(x);
    }
  }

  @Override
  public T fjern(){
    if (start.neste==null){
      throw new UgyldigListeIndeks(-1);
    }
    else{
      Node p = start.neste;
      start.neste = p.neste;
      return p.data;
    }
  }

  @Override
  public void sett(int pos, T x){
    if (pos<0 || pos>=this.stoerrelse()){
      throw new UgyldigListeIndeks(pos);
    }
    Node p = start;
    for (int i = 0; i < pos; i++){
      p = p.neste;
    }
    p.neste.data = x;
  }

  @Override
  public void leggTil(int pos, T x){
    if (pos<0 || pos > this.stoerrelse()){
      throw new UgyldigListeIndeks(pos);
    }
    if (pos==0){
      Node p = new Node(x);
      p.neste = start.neste;
      start.neste = p;
    }
    else{
      Node p = start;
      for (int i = 0; i < pos; i++){
        p = p.neste;
      }
      Node ny = new Node(x);
      ny.neste=p.neste;
      p.neste=ny;
    }
  }

  @Override
  public T fjern(int pos){
    if (pos<0 || pos>=this.stoerrelse()){
      throw new UgyldigListeIndeks(pos);
    }
    Node p = start;
    for (int i = 0; i < pos; i++){
      p = p.neste;
    }
    Node fjernes = p.neste;
    p.neste = fjernes.neste;
    return fjernes.data;
  }

  @Override
  public int stoerrelse(){
    Node p = start;
    int n = 0;
    while (p.neste != null){
      n++;
      p = p.neste;
    }
    return n;
  } /*Kan lage en egen variabel for stoerrelse.*/

  @Override
  public T hent(int pos){
    if (pos<0 || pos>=this.stoerrelse()){
      throw new UgyldigListeIndeks(pos);
    }
    Node p = start.neste;
    for (int i = 0; i < pos; i++){
      p = p.neste;
    }
    return p.data;
  }
}

UgyldigListeIndeks.java
class UgyldigListeIndeks extends RuntimeException{
  UgyldigListeIndeks(int indeks) {
    super("Ugyldig indeks: " + indeks);
  }
}

Labyrint.java
import java.util.ArrayList;
import java.util.Scanner;
import java.io.*;
import javafx.scene.layout.GridPane;

class Labyrint{
  ArrayList<ArrayList<Rute>> lab;
  int ant_rad = -1;
  int ant_kol = -1;
  Liste<String> utveier;

  public Labyrint(int rad, int kol, ArrayList<ArrayList<Rute>> komplett){
    this.ant_rad = rad;
    this.ant_kol = kol;
    this.lab = komplett;
  }

  public ArrayList<ArrayList<Rute>> getLab(){
    return this.lab;
  }

  static Labyrint lesFraFil(File fil) throws FileNotFoundException{
    Scanner scanner = new Scanner(fil);
    String forsteLine = scanner.nextLine();
    String[] splitLine = forsteLine.split(" ");
    int ant_rad = Integer.parseInt(splitLine[0]);
    int ant_kol = Integer.parseInt(splitLine[1]);
    int radTeller = 0;
    ArrayList<ArrayList<Rute>> komplett = new ArrayList<ArrayList<Rute>>();

    while (scanner.hasNextLine()){
      String line = scanner.nextLine();
      ArrayList<Rute> rad = new ArrayList<Rute>();
      for (int i=0; i<ant_kol;i++){
        char tegn = line.charAt(i);
        Rute ny;
        if (tegn == '.' && (radTeller==ant_rad-1 || radTeller==0 || i==ant_kol-1 || i==0)){
          ny = new Aapning(radTeller,i);
        } else if (tegn == '.'){
          ny = new HvitRute(radTeller,i);
        } else {
          ny = new SortRute(radTeller,i);
        }
        rad.add(ny);
      }
      radTeller++;
      komplett.add(rad);
    }
    for (int x=0; x<ant_rad; x++){
      for (int y=0; y<ant_kol; y++){
        if (y<ant_kol-1){
          komplett.get(x).get(y).settOst(komplett.get(x).get(y+1));
          komplett.get(x).get(y+1).settVest(komplett.get(x).get(y));
        }
        if (x<ant_rad-1){
          komplett.get(x).get(y).settSyd(komplett.get(x+1).get(y));
          komplett.get(x+1).get(y).settNord(komplett.get(x).get(y));
        }
      }
    }
    Labyrint labyrint = new Labyrint(ant_rad, ant_kol, komplett);
    for (int x=0; x<ant_rad; x++){
      for (int y=0; y<ant_kol; y++){
        komplett.get(x).get(y).setLab(labyrint);
      }
    }
    return labyrint;
  }

  @Override
  public String toString(){
    String labyrintStr = "";
    String charTilStr = "";
    for (int x = 0; x<this.ant_rad; x++){
      for (int y = 0; y<this.ant_kol; y++){
        charTilStr = String.valueOf(this.lab.get(x).get(y).tilTegn());
        labyrintStr = labyrintStr.concat(charTilStr);
      }
      labyrintStr = labyrintStr.concat("\n");
    }
    return labyrintStr;
  }

  public Liste<String> finnUtveiFra(int kol, int rad){
    this.utveier = new Lenkeliste<String>();
    this.lab.get(rad).get(kol).finnUtvei();
    return this.utveier;
  }
}

Stoppbehandler.java
import javafx.application.Application;
import javafx.application.Platform;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.layout.GridPane;
import javafx.scene.control.Button;
import javafx.scene.text.Text;
import javafx.scene.text.Font;
import javafx.event.*;

import java.util.Random;

class Stoppbehandler implements EventHandler<ActionEvent> {
    @Override
    public void handle(ActionEvent e) {
  Platform.exit();
}
}

VisLabyrint.java
import javafx.application.Application;
import javafx.application.Platform;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.layout.GridPane;
import javafx.scene.Node;

import javafx.stage.FileChooser;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;

import java.io.File;
import java.util.Scanner;
import java.util.ArrayList;
import java.io.*;

import javafx.scene.control.Button;
import javafx.scene.text.Text;
import javafx.scene.text.Font;
import javafx.event.*;

public class VisLabyrint extends Application{
  public File file = null;
  private GridPane labyrint = new GridPane();
  private Labyrint l = null;
  public int ant_rad;
  public int ant_kol;
  Text statusinfo;
  /**
   * Konverterer losning-String fra oblig 5 til en boolean[][]-representasjon
   * av losningstien.
   * @param losningString String-representasjon av utveien
   * @param bredde        bredde til labyrinten
   * @param hoyde         hoyde til labyrinten
   * @return              2D-representasjon av rutene der true indikerer at
   *                      ruten er en del av utveien.
   */
  static boolean[][] losningStringTilTabell(String losningString, int bredde, int hoyde) {
      boolean[][] losning = new boolean[hoyde][bredde];
      java.util.regex.Pattern p = java.util.regex.Pattern.compile("\\(([0-9]+),([0-9]+)\\)");
      java.util.regex.Matcher m = p.matcher(losningString.replaceAll("\\s",""));
      while (m.find()) {
          int x = Integer.parseInt(m.group(1));
          int y = Integer.parseInt(m.group(2));
          losning[y][x] = true;
      }
      return losning;
  }

  class Klikkbehandler implements EventHandler<ActionEvent>{
  Button tast = null;
  Integer colIndex = -1;
  Integer rowIndex = -1;

  private Button getNodeFromGridPane(GridPane gridPane, int col, int row) {
    for (Node node : gridPane.getChildren()) {
      Integer columnIndex = GridPane.getColumnIndex(node);
      Integer rowIndex = GridPane.getRowIndex(node);
      if ((columnIndex != null && columnIndex.intValue() == col) && (rowIndex != null && rowIndex.intValue() == row)) {
        if (node instanceof Button){
          Button butt = (Button) node;
          return butt;
        } else{
          return null;
        }
      }
    }
    return null;
  }

  @Override
  public void handle(ActionEvent e){
    Button button = (Button)e.getSource();
    String knappTekst = button.getText();
    //System.out.println(knappTekst);
    if (knappTekst.equals("#")){
      System.out.println(knappTekst + ": Denne kan ikke velges.");
    } else if (knappTekst.equals(".")){
      this.colIndex = GridPane.getColumnIndex(button);
      this.rowIndex = GridPane.getRowIndex(button);
      Liste<String> utveier = l.finnUtveiFra(this.colIndex, this.rowIndex);
      statusinfo.setText("Det finnes " + utveier.stoerrelse() + " utvei(er).");
      boolean[][] bool_utvei = losningStringTilTabell(utveier.hent(0),ant_kol,ant_rad);
      for (int x = 0; x<ant_rad; x++){
        for (int y = 0; y<ant_kol; y++){
          Button hentetButton = getNodeFromGridPane(labyrint, y, x); //Hente ut knapp fra en posisjon og gjore denne gul.
          if (bool_utvei[x][y]){
            hentetButton.setText("!");
            hentetButton.setStyle("-fx-background-color: #16C3EF; -fx-text-fill: #16C3EF");
          }
        }
      }
    }
  }
}

  @Override
  public void start(Stage teater) {
    this.statusinfo = new Text("Velg startrute.");
    this.statusinfo.setFont(new Font(18));
    this.statusinfo.setX(0);
    this.statusinfo.setY(20);

    Button stoppknapp = new Button("Stopp");
    stoppknapp.setFont(new Font(18));
    stoppknapp.setLayoutX(200); stoppknapp.setLayoutY(0);
    Stoppbehandler stopp = new Stoppbehandler();
    stoppknapp.setOnAction(stopp);

    this.labyrint.setGridLinesVisible(false);
    this.labyrint.setLayoutX(0); this.labyrint.setLayoutY(50);

    Klikkbehandler klikk = new Klikkbehandler();

    this.file = new FileChooser().showOpenDialog(teater);

    try{
      this.l = Labyrint.lesFraFil(this.file);
      ArrayList<ArrayList<Rute>> rutenett = this.l.getLab();
      this.ant_rad = rutenett.size();
      this.ant_kol = rutenett.get(0).size();
      for (int x = 0; x<this.ant_rad; x++){
        for (int y = 0; y<this.ant_kol; y++){
          String charTilStr = String.valueOf(rutenett.get(x).get(y).tilTegn());
          Button knapp = new Button(charTilStr);
          if (knapp.getText().equals("#")){
            knapp.setStyle("-fx-background-color: #000000; -fx-text-fill: #000000"); //Svart farge...
          } else if (knapp.getText().equals(".")){
            knapp.setStyle("-fx-background-color: #ffffff; -fx-text-fill: #0000ff"); //Hvit farge...
          }
          knapp.setOnAction(klikk);
          this.labyrint.add(knapp,y,x);
        }
      }
    } catch (Exception e){}

    Pane kulisser = new Pane();

    kulisser.getChildren().add(this.labyrint);
    kulisser.getChildren().add(this.statusinfo);
    kulisser.getChildren().add(stoppknapp);
    Scene scene = new Scene(kulisser);

    teater.setTitle("Labyrint");
    teater.setScene(scene);
    teater.show();
  }



  public static void main(String[] args){
    launch(args);
  }
}
