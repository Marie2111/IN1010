Liste.java
interface Liste<T>/* extends Iterable<T>*/{
  public abstract int stoerrelse();
  public abstract void leggTil(int pos, T x);
  public abstract void leggTil(T x);
  public abstract void sett(int pos, T x);
  public abstract T hent(int pos);
  public abstract T fjern(int pos);
  public abstract T fjern();
}

Lenkeliste.java
class Lenkeliste<T> implements Liste<T>{
  public class Node{
    Node neste = null;
    T data;

    Node(T x){ /*Nodens konstruktoer*/
      this.data = x;
    }
  }
  public Node start = new Node(null);

  @Override /*Foerst inn, foerst ut = queue.*/
  public void leggTil(T x){
    if (start.neste == null){ /*Sjekker om lista er tom.*/
      start.neste = new Node(x);
      System.out.println(start.neste.data);
    }
    else{
      Node p = start;
      while (p.neste != null){ /*Finner siste sted i lista.*/
        p = p.neste;
      }
      p.neste = new Node(x);
    }
  }

  @Override
  public T fjern(){
    if (start.neste==null){
      throw new UgyldigListeIndeks(-1);
    }
    else{
      Node p = start.neste;
      start.neste = p.neste;
      return p.data;
    }
  }

  @Override
  public void sett(int pos, T x){
    if (pos<0 || pos>=this.stoerrelse()){
      throw new UgyldigListeIndeks(pos);
    }
    Node p = start;
    for (int i = 0; i < pos; i++){
      p = p.neste;
    }
    p.neste.data = x;
  }

  @Override
  public void leggTil(int pos, T x){
    if (pos<0 || pos > this.stoerrelse()){
      throw new UgyldigListeIndeks(pos);
    }
    if (pos==0){
      Node p = new Node(x);
      p.neste = start.neste;
      start.neste = p;
    }
    else{
      Node p = start;
      for (int i = 0; i < pos; i++){
        p = p.neste;
      }
      Node ny = new Node(x);
      ny.neste=p.neste;
      p.neste=ny;
    }
  }

  @Override
  public T fjern(int pos){
    if (pos<0 || pos>=this.stoerrelse()){
      throw new UgyldigListeIndeks(pos);
    }
    Node p = start;
    for (int i = 0; i < pos; i++){
      p = p.neste;
    }
    Node fjernes = p.neste;
    p.neste = fjernes.neste;
    return fjernes.data;
  }

  @Override
  public int stoerrelse(){
    Node p = start;
    int n = 0;
    while (p.neste != null){
      n++;
      p = p.neste;
    }
    return n;
  } /*Kan lage en egen variabel for stoerrelse.*/

  @Override
  public T hent(int pos){
    if (pos<0 || pos>=this.stoerrelse()){
      throw new UgyldigListeIndeks(pos);
    }
    Node p = start.neste;
    for (int i = 0; i < pos; i++){
      p = p.neste;
    }
    return p.data;
  }
}

SortertLenkeliste.java
class SortertLenkeliste<T extends Comparable<T>> extends Lenkeliste<T>{
  public SortertLenkeliste(){
    super();
  }

  @Override
  public void leggTil(T x){
    if (start.neste == null){ /*Sjekker om lista er tom.*/
      start.neste = new Node(x);
      System.out.println(start.neste.data);
    }
    else{
      Node p = start;

      while (p.neste != null && p.neste.data.compareTo(x)<0){
        p = p.neste;
      } //p er stoerre eller lik x.

      Node ny = new Node(x);
      if (p.neste != null){
        ny.neste = p.neste;
      }
      p.neste = ny;
    }
  }

  @Override
    public T fjern(){
      int lengde = this.stoerrelse();
      return fjern(lengde-1); /*Posisjon er lengde-1*/
    }

  @Override
    public void leggTil(int pos, T x){
      throw new UnsupportedOperationException("Denne kan ikke brukes.");
    }

  @Override
  public void sett(int pos, T x){
      throw new UnsupportedOperationException("Denne kan ikke brukes.");
    }
}

Stabel.java
class Stabel<T> extends Lenkeliste<T>{
  public Stabel(){
    super();
  }

  public void leggPaa(T x){
    this.leggTil(x);
  }

  public T taAv(){
    int lengde = this.stoerrelse();
    return fjern(lengde-1); /*Posisjon er lengde-1*/
  }
}

UgyldigListeIndeks.java
class UgyldigListeIndeks extends RuntimeException{
  UgyldigListeIndeks(int indeks) {
    super("Ugyldig indeks: " + indeks);
  }
}

TestLenkeliste.java
public class TestLenkeliste {
    private static int antallTester = 0;
    private static int antallPasserte = 0;
    private static int antallFeil = 0;

    public static void main(String[] args) {
        testTom();
        testEttElement();
        testLeggTilOgFjerningAvFlereElementer();
        testLeggTilPaaIndeks();
        testFjernOgSettMedIndeks();
        testUnntak();
        System.out.println("\n"+ antallTester + " tester ferdig");
        System.out.println(antallPasserte + " passerte, " + antallFeil + " feil");
    }

    static void testTom() {
        System.out.println("Test tom liste");
        Liste<String> liste = new Lenkeliste<String>();
        sjekk(0, liste.stoerrelse(), "stoerrelse() i tom liste");
    }

    static void testEttElement() {
        System.out.println("\nTest ett element");
        // Her tester vi med Integer, det burde fungere like bra som String
        Liste<Integer> liste = new Lenkeliste<Integer>();
        liste.leggTil(0);
        sjekk(1, liste.stoerrelse(), "stoerrelse() i liste med ett element");
        Integer hentetElement = liste.hent(0);
        sjekk(0, hentetElement, "hent(0) i liste med ett element");
        // hent(0) skal ikke fjerne elementet, la oss sjekke at fjerning fungerer
        Integer fjernetElement = liste.fjern(0);
        sjekk(0, fjernetElement, "fjern(0) i liste med ett element");
        sjekk(0, liste.stoerrelse(), "stoerrelse() etter at eneste element er fjernet");
    }

    static void testLeggTilOgFjerningAvFlereElementer() {
        System.out.println("\nTest leggTil() og fjern() med flere elementer");
        Liste<String> liste = new Lenkeliste<String>();
        liste.leggTil("Element 0");
        liste.leggTil("Element X");
        liste.leggTil("Element X"); // Legg til begge selv om de har samme verdi
        liste.leggTil("Element 3");
        sjekk(4, liste.stoerrelse(), "stoerrelse() i liste med 4 elementer");
        sjekk("Element 0", liste.hent(0), "hent(0) i liste med 4 elementer");
        sjekk("Element 3", liste.hent(3), "hent(3) i liste med 4 elementer");
        sjekk("Element 0", liste.fjern(), "fjern() i liste med 4 elementer");
        sjekk("Element X", liste.fjern(), "fjern() (for andre gang) i liste med 3 elementer");
        sjekk(2, liste.stoerrelse(), "stoerrelse() etter fjerning av 2 av 4 elementer");
    }

    static void testLeggTilPaaIndeks() {
        System.out.println("\nTest leggTil() og leggTil(pos) paa indeks");
        Liste<String> liste = new Lenkeliste<String>();
        liste.leggTil(0, "Element X");
        sjekk("Element X", liste.hent(0), "hent(0) etter leggTil(0, \"Element X\")");
        liste.leggTil("Element A");
        liste.leggTil("Element B");
        liste.leggTil(0, "Foran X");
        liste.leggTil(2, "Foran A");
        // Forventet rekkefolge: Foran X, Element X, Foran A, Element A, Element B
        sjekk("Foran X", liste.hent(0), "hent(0) etter leggTil(0, \"Foran X\")");
        sjekk("Foran A", liste.hent(2), "hent(2) etter flere leggTil med og uten indeks");
        sjekk("Element B", liste.hent(4), "hent(4) etter flere leggTil med og uten indeks");
        liste.leggTil(5, "Bakerst");
        sjekk("Bakerst", liste.hent(5), "hent(5) etter leggTil(5, \"Bakerst\")");
        sjekk(6, liste.stoerrelse(), "stoerrelse() etter leggTil med og uten indeks");
    }

    static void testFjernOgSettMedIndeks() {
        System.out.println("\nTest fjern(pos) og sett(pos, x) med indekser");
        Liste<String> liste = new Lenkeliste<String>();
        liste.leggTil("Element 0");
        liste.leggTil("Element 1");
        liste.leggTil("Element 2");
        liste.leggTil("Element 3");
        liste.leggTil("Element 4");
        liste.sett(0, "nyVerdi 0");
        liste.sett(2, "nyVerdi 2");
        sjekk("nyVerdi 0", liste.hent(0), "hent(0) etter sett(0, \"nyVerdi 0\")");
        sjekk("nyVerdi 2", liste.hent(2), "hent(2) etter sett(2, \"nyVerdi 2\")");
        sjekk("Element 3", liste.fjern(3), "fjern(3)");
        sjekk("Element 4", liste.fjern(3), "fjern(3) for andre gang");
        liste.leggTil("NyttElement");
        sjekk("NyttElement", liste.hent(3), "hent(3) skal hente nytt element lagt til etter at andre elementer har blitt fjernet");
        sjekk(4, liste.stoerrelse(), "stoerrelse() etter flere kall paa fjern() og leggTil()");
    }

    static void testUnntak() {
        System.out.println("\nTest unntak");
        Liste<String> liste = new Lenkeliste<String>();
        try {
            liste.fjern(); // skal ikke fungere, men skal kaste et unntak
            // hit kommer vi ikke om det ble kastet et unntak
            sjekkFeilet("fjern() paa tom liste skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.fjern(0);
            sjekkFeilet("fjern(0) paa tom liste skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.hent(0);
            sjekkFeilet("hent(0) paa tom liste skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.sett(0, "asd");
            sjekkFeilet("sett(0, ...) paa tom liste skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.leggTil(1, "asd");
            sjekkFeilet("leggTil(1, ...) paa tom liste skulle kastet unntak - kun indeks 0 er gyldig i tom liste");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        liste.leggTil("Forste element");
        liste.leggTil(1, "Andre element"); // Sette inn bakerst skal fungere
        try {
            liste.fjern(2);
            sjekkFeilet("fjern(2) paa liste med 2 elementer skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.hent(2);
            sjekkFeilet("hent(2) paa liste med 2 elementer skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.sett(2, "2 er ugyldig indeks");
            sjekkFeilet("sett(2, ...) paa liste med 2 elementer skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.leggTil(3, "3 er ugyldig indeks");
            sjekkFeilet("leggTil(3, ...) paa liste med 2 elementer skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.fjern(-1);
            sjekkFeilet("fjern(-1) skal kaste unntaket UgyldigListeIndeks");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.hent(-1);
            sjekkFeilet("hent(-1) skal kaste unntaket UgyldigListeIndeks");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.sett(-1, "-1 er en ugyldig indeks!");
            sjekkFeilet("sett(-1, ...) skal kaste unntaket UgyldigListeIndeks");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.leggTil(-1, "-1 er en ugyldig indeks!");
            sjekkFeilet("leggTil(-1, ...) skal kaste unntaket UgyldigListeIndeks");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }
    }

    static void sjekk(Object forventet, Object faktisk, String testmelding) {
        if (forventet.equals(faktisk)) {
            sjekkPasserte();
        } else {
            sjekkFeilet(testmelding);
            System.out.println("  > Forventet verdi: " + forventet);
            System.out.println("  > Faktisk verdi: " + faktisk);
        }
    }

    static void sjekkPasserte() {
        antallTester++;
        antallPasserte++;
        System.out.println("- Test " + antallTester + ": OK");
    }

    static void sjekkFeilet(String testmelding) {
        antallTester++;
        antallFeil++;
        System.out.println("- Test " + antallTester + " feilet: " + testmelding);
    }
}

TestSortertLenkeliste.java
public class TestSortertLenkeliste {
    private static int antallTester = 0;
    private static int antallPasserte = 0;
    private static int antallFeil = 0;

    public static void main(String[] args) {
        testTom();
        testEttElement();
        testLeggTilOgFjerningAvFlereElementer();
        testLeggTilMedIntegers();
        testFjernMedIndeks();
        testUnntak();
        System.out.println("\n"+ antallTester + " tester ferdig");
        System.out.println(antallPasserte + " passerte, " + antallFeil + " feil");
    }

    static void testTom() {
        System.out.println("Test tom liste");
        Liste<String> liste = new SortertLenkeliste<String>();
        sjekk(0, liste.stoerrelse(), "stoerrelse() i tom liste");
    }

    static void testEttElement() {
        System.out.println("\nTest ett element");
        Liste<String> liste = new SortertLenkeliste<String>();
        liste.leggTil("A");
        sjekk(1, liste.stoerrelse(), "stoerrelse() i liste med ett element");
        String hentetElement = liste.hent(0);
        sjekk("A", hentetElement, "hent(0) i liste med ett element");
        // hent(0) skal ikke fjerne elementet, la oss sjekke at fjerning fungerer
        String fjernetElement = liste.fjern();
        sjekk("A", fjernetElement, "fjern() i liste med ett element");
        sjekk(0, liste.stoerrelse(), "stoerrelse() etter at eneste element er fjernet");
    }

    static void testLeggTilOgFjerningAvFlereElementer() {
        System.out.println("\nTest leggTil() og fjern() med flere elementer");
        Liste<String> liste = new SortertLenkeliste<String>();
        liste.leggTil("C");
        liste.leggTil("A");
        liste.leggTil("D");
        liste.leggTil("B");
        sjekk(4, liste.stoerrelse(), "stoerrelse() i liste med 4 elementer");
        sjekk("A", liste.hent(0), "hent(0) i liste med 4 elementer");
        sjekk("B", liste.hent(1), "hent(1) i liste med 4 elementer");
        sjekk("D", liste.hent(3), "hent(3) i liste med 4 elementer");
        sjekk("D", liste.fjern(), "fjern() i liste med 4 elementer");
        sjekk("C", liste.fjern(), "fjern() (for andre gang) i liste med 3 elementer");
        sjekk(2, liste.stoerrelse(), "stoerrelse() etter fjerning av 2 av 4 elementer");
    }

    static void testLeggTilMedIntegers() {
        System.out.println("\nTest leggTil() med Integer i stedet for String");
        Liste<Integer> liste = new SortertLenkeliste<Integer>();
        liste.leggTil(4);
        liste.leggTil(1337);
        liste.leggTil(30);
        liste.leggTil(15);
        String rekkefolge = "" + liste.hent(0) + " - " + liste.hent(1) + " - " + liste.hent(2) + " - " + liste.hent(3);
        sjekk("4 - 15 - 30 - 1337", rekkefolge, "sjekk at sortering blir riktig med integers");
    }

    static void testFjernMedIndeks() {
        System.out.println("\nTest fjern(pos) med indekser");
        Liste<String> liste = new SortertLenkeliste<String>();
        liste.leggTil("elementC");
        liste.leggTil("elementAA");
        liste.leggTil("elementSist");
        liste.leggTil("elementAA"); // Duplikater skal vaere tillatt
        liste.leggTil("elementBBB");
        liste.leggTil("elementD");

        String rekkefolge = liste.hent(0) + " - " + liste.hent(1) + " - " + liste.hent(2) +
                " - " + liste.hent(3) + " - " + liste.hent(4) + " - " + liste.hent(5);
        String forventet = "elementAA - elementAA - elementBBB - elementC - elementD - elementSist";

        sjekk(forventet, rekkefolge, "sjekk at sortering blir riktig med strings");
        sjekk("elementBBB", liste.fjern(2), "fjern(2) paa listen ["+rekkefolge+"]");
        sjekk("elementC", liste.fjern(2), "fjern(2) andre gang paa listen ["+rekkefolge+"]");
        sjekk("elementSist", liste.fjern(), "fjern() der elementSist skal ligge sist");
        sjekk(3, liste.stoerrelse(), "stoerrelse() etter flere kall paa fjern() og leggTil()");
    }

    static void testUnntak() {
        System.out.println("\nTest unntak");
        Liste<String> liste = new SortertLenkeliste<String>();
        try {
            liste.fjern(); // skal ikke fungere, men skal kaste et unntak
            // hit kommer vi ikke om det ble kastet et unntak
            sjekkFeilet("fjern() paa tom liste skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.fjern(0);
            sjekkFeilet("fjern(0) paa tom liste skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.hent(0);
            sjekkFeilet("hent(0) paa tom liste skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.sett(0, "forventet UnsupportedOperationException her");
            sjekkFeilet("sett(0, ...) skulle kastet UnsupportedOperationException");
        } catch(UnsupportedOperationException e) {
            sjekkPasserte();
        }

        try {
            liste.leggTil(1, "forventet UnsupportedOperationException her");
            sjekkFeilet("leggTil(1, ...) skulle kastet UnsupportedOperationException");
        } catch(UnsupportedOperationException e) {
            sjekkPasserte();
        }

        liste.leggTil("Forste element");
        liste.leggTil("Siste element");
        try {
            liste.fjern(2);
            sjekkFeilet("fjern(2) paa liste med 2 elementer skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.hent(2);
            sjekkFeilet("hent(2) paa liste med 2 elementer skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.sett(2, "forventet UnsupportedOperationException her");
            sjekkFeilet("sett(2, ...) skulle kastet UnsupportedOperationException");
        } catch(UnsupportedOperationException e) {
            sjekkPasserte();
        }

        try {
            liste.leggTil(3, "forventet UnsupportedOperationException her");
            sjekkFeilet("leggTil(3, ...) skulle kastet UnsupportedOperationException");
        } catch(UnsupportedOperationException e) {
            sjekkPasserte();
        }

        try {
            liste.fjern(-1);
            sjekkFeilet("fjern(-1) skal kaste unntaket UgyldigListeIndeks");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.hent(-1);
            sjekkFeilet("hent(-1) skal kaste unntaket UgyldigListeIndeks");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.sett(-1, "forventet UnsupportedOperationException her");
            sjekkFeilet("sett(-1, ...) skulle kastet UnsupportedOperationException");
        } catch(UnsupportedOperationException e) {
            sjekkPasserte();
        }

        try {
            liste.leggTil(-1, "forventet UnsupportedOperationException her");
            sjekkFeilet("leggTil(-1, ...) skulle kastet UnsupportedOperationException");
        } catch(UnsupportedOperationException e) {
            sjekkPasserte();
        }
    }

    static void sjekk(Object forventet, Object faktisk, String testmelding) {
        if (forventet.equals(faktisk)) {
            sjekkPasserte();
        } else {
            sjekkFeilet(testmelding);
            System.out.println("  > Forventet verdi: " + forventet);
            System.out.println("  > Faktisk verdi: " + faktisk);
        }
    }

    static void sjekkPasserte() {
        antallTester++;
        antallPasserte++;
        System.out.println("- Test " + antallTester + ": OK");
    }

    static void sjekkFeilet(String testmelding) {
        antallTester++;
        antallFeil++;
        System.out.println("- Test " + antallTester + " feilet: " + testmelding);
    }
}

TestStabel.java
public class TestStabel {
    private static int antallTester = 0;
    private static int antallPasserte = 0;
    private static int antallFeil = 0;

    public static void main(String[] args) {
        // Disse metodene er identiske med testmetodene i TestLenkeliste
        testTom();
        testEttElement();
        testLeggTilOgFjerningAvFlereElementer();
        testLeggTilPaaIndeks();
        testFjernOgSettMedIndeks();
        testUnntak();
        // Ekstra Stabel-spesifikke tester
        testStabelMetoder();
        System.out.println("\n"+ antallTester + " tester ferdig");
        System.out.println(antallPasserte + " passerte, " + antallFeil + " feil");
    }

    static void testTom() {
        System.out.println("Test tom liste");
        Liste<String> liste = new Stabel<String>();
        sjekk(0, liste.stoerrelse(), "stoerrelse() i tom liste");
    }

    static void testEttElement() {
        System.out.println("\nTest ett element");
        // Her tester vi med Integer, det burde fungere like bra som String
        Liste<Integer> liste = new Stabel<Integer>();
        liste.leggTil(0);
        sjekk(1, liste.stoerrelse(), "stoerrelse() i liste med ett element");
        Integer hentetElement = liste.hent(0);
        sjekk(0, hentetElement, "hent(0) i liste med ett element");
        // hent(0) skal ikke fjerne elementet, la oss sjekke at fjerning fungerer
        Integer fjernetElement = liste.fjern(0);
        sjekk(0, fjernetElement, "fjern(0) i liste med ett element");
        sjekk(0, liste.stoerrelse(), "stoerrelse() etter at eneste element er fjernet");
    }

    static void testLeggTilOgFjerningAvFlereElementer() {
        System.out.println("\nTest leggTil() og fjern() med flere elementer");
        Liste<String> liste = new Stabel<String>();
        liste.leggTil("Element 0");
        liste.leggTil("Element X");
        liste.leggTil("Element X"); // Legg til begge selv om de har samme verdi
        liste.leggTil("Element 3");
        sjekk(4, liste.stoerrelse(), "stoerrelse() i liste med 4 elementer");
        sjekk("Element 0", liste.hent(0), "hent(0) i liste med 4 elementer");
        sjekk("Element 3", liste.hent(3), "hent(3) i liste med 4 elementer");
        sjekk("Element 0", liste.fjern(), "fjern() i liste med 4 elementer");
        sjekk("Element X", liste.fjern(), "fjern() (for andre gang) i liste med 3 elementer");
        sjekk(2, liste.stoerrelse(), "stoerrelse() etter fjerning av 2 av 4 elementer");
    }

    static void testLeggTilPaaIndeks() {
        System.out.println("\nTest leggTil() og leggTil(pos) paa indeks");
        Liste<String> liste = new Stabel<String>();
        liste.leggTil(0, "Element X");
        sjekk("Element X", liste.hent(0), "hent(0) etter leggTil(0, \"Element X\")");
        liste.leggTil("Element A");
        liste.leggTil("Element B");
        liste.leggTil(0, "Foran X");
        liste.leggTil(2, "Foran A");
        // Forventet rekkefolge: Foran X, Element X, Foran A, Element A, Element B
        sjekk("Foran X", liste.hent(0), "hent(0) etter leggTil(0, \"Foran X\")");
        sjekk("Foran A", liste.hent(2), "hent(2) etter flere leggTil med og uten indeks");
        sjekk("Element B", liste.hent(4), "hent(4) etter flere leggTil med og uten indeks");
        liste.leggTil(5, "Bakerst");
        sjekk("Bakerst", liste.hent(5), "hent(5) etter leggTil(5, \"Bakerst\")");
        sjekk(6, liste.stoerrelse(), "stoerrelse() etter leggTil med og uten indeks");
    }

    static void testFjernOgSettMedIndeks() {
        System.out.println("\nTest fjern(pos) og sett(pos, x) med indekser");
        Liste<String> liste = new Stabel<String>();
        liste.leggTil("Element 0");
        liste.leggTil("Element 1");
        liste.leggTil("Element 2");
        liste.leggTil("Element 3");
        liste.leggTil("Element 4");
        liste.sett(0, "nyVerdi 0");
        liste.sett(2, "nyVerdi 2");
        sjekk("nyVerdi 0", liste.hent(0), "hent(0) etter sett(0, \"nyVerdi 0\")");
        sjekk("nyVerdi 2", liste.hent(2), "hent(2) etter sett(2, \"nyVerdi 2\")");
        sjekk("Element 3", liste.fjern(3), "fjern(3)");
        sjekk("Element 4", liste.fjern(3), "fjern(3) for andre gang");
        liste.leggTil("NyttElement");
        sjekk("NyttElement", liste.hent(3), "hent(3) skal hente nytt element lagt til etter at andre elementer har blitt fjernet");
        sjekk(4, liste.stoerrelse(), "stoerrelse() etter flere kall paa fjern() og leggTil()");
    }

    static void testUnntak() {
        System.out.println("\nTest unntak");
        Liste<String> liste = new Stabel<String>();
        try {
            liste.fjern(); // skal ikke fungere, men skal kaste et unntak
            // hit kommer vi ikke om det ble kastet et unntak
            sjekkFeilet("fjern() paa tom liste skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.fjern(0);
            sjekkFeilet("fjern(0) paa tom liste skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.hent(0);
            sjekkFeilet("hent(0) paa tom liste skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.sett(0, "asd");
            sjekkFeilet("sett(0, ...) paa tom liste skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.leggTil(1, "asd");
            sjekkFeilet("leggTil(1, ...) paa tom liste skulle kastet unntak - kun indeks 0 er gyldig i tom liste");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        liste.leggTil("Forste element");
        liste.leggTil(1, "Andre element"); // Sette inn bakerst skal fungere
        try {
            liste.fjern(2);
            sjekkFeilet("fjern(2) paa liste med 2 elementer skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.hent(2);
            sjekkFeilet("hent(2) paa liste med 2 elementer skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.sett(2, "2 er ugyldig indeks");
            sjekkFeilet("sett(2, ...) paa liste med 2 elementer skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.leggTil(3, "3 er ugyldig indeks");
            sjekkFeilet("leggTil(3, ...) paa liste med 2 elementer skulle kastet unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.fjern(-1);
            sjekkFeilet("fjern(-1) skal kaste unntaket UgyldigListeIndeks");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.hent(-1);
            sjekkFeilet("hent(-1) skal kaste unntaket UgyldigListeIndeks");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.sett(-1, "-1 er en ugyldig indeks!");
            sjekkFeilet("sett(-1, ...) skal kaste unntaket UgyldigListeIndeks");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }

        try {
            liste.leggTil(-1, "-1 er en ugyldig indeks!");
            sjekkFeilet("leggTil(-1, ...) skal kaste unntaket UgyldigListeIndeks");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }
    }

    static void testStabelMetoder() {
        Stabel<String> stabel = new Stabel<String>();
        System.out.println("\nTest stabel-spesifikke metoder leggPaa og taAv");
        stabel.leggPaa("Element 0");
        stabel.leggPaa("Element 1");
        stabel.leggPaa("Element 2");
        sjekk("Element 2", stabel.hent(2), "hent(2) paa stabel med 3 elementer");
        sjekk(3, stabel.stoerrelse(), "stoerrelse paa stabel med 3 elementer");
        sjekk("Element 2", stabel.taAv(), "taAv() paa stabel med 3 elementer");
        sjekk("Element 1", stabel.taAv(), "taAv() paa stabel for andre gang");
        sjekk(1, stabel.stoerrelse(), "stoerrelse() paa stabel etter at taAv() har blitt kalt");
        sjekk("Element 0", stabel.taAv(), "taAv() paa stabel med ett element");
        sjekk(0, stabel.stoerrelse(), "stoerrelse() paa stabel som har blitt tom etter flere taAv()");

        try {
            stabel.taAv();
            sjekkFeilet("taAv() paa tom stabel skal kaste et unntak");
        } catch(UgyldigListeIndeks e) {
            sjekkPasserte();
        }
    }

    static void sjekk(Object forventet, Object faktisk, String testmelding) {
        if (forventet.equals(faktisk)) {
            sjekkPasserte();
        } else {
            sjekkFeilet(testmelding);
            System.out.println("  > Forventet verdi: " + forventet);
            System.out.println("  > Faktisk verdi: " + faktisk);
        }
    }

    static void sjekkPasserte() {
        antallTester++;
        antallPasserte++;
        System.out.println("- Test " + antallTester + ": OK");
    }

    static void sjekkFeilet(String testmelding) {
        antallTester++;
        antallFeil++;
        System.out.println("- Test " + antallTester + " feilet: " + testmelding);
    }
}
